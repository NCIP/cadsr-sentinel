<!--L
  Copyright ScenPro Inc, SAIC-F

  Distributed under the OSI-approved BSD 3-Clause License.
  See http://ncip.github.com/cadsr-sentinal/LICENSE.txt for details.
L-->

<!-- Copyright NCI 2005
    $Header: /share/content/gforge/sentinel/sentinel/build.xml,v 1.160 2009-07-24 15:48:49 davet Exp $
    $Name: not supported by cvs2svn $
-->
<project name="caDSR Sentinel Alert Tool" default="build-product" basedir=".">
    <description>
        Build and deploy the caDSR Sentinel Alert Tool
    </description>
    <!-- set global properties for this build -->
    <tstamp/>

	<scriptdef language="javascript" name="upper">
	    <attribute name="string" /> 
	    <attribute name="to" />

	    project.setProperty( attributes.get( "to" ),
	                         attributes.get( "string" ).toUpperCase() );
	</scriptdef>

    <property name="root.dir" location="${basedir}/src/web/WebRoot" />
    <property name="artifacts.dir" location="${basedir}/deployment-artifacts" />
    <property name="doc.dir" location="${artifacts.dir}/javadoc" />
    <property name="temp.dir" location="${basedir}/tmp" />
    <property name="tr.dir" location="${artifacts.dir}/test-results" />
    <property name="odi.dir" location="${artifacts.dir}/ospack" />
    <property name="web.dir" location="${root.dir}/WEB-INF" />
    <property name="classes.dir" location="${web.dir}/classes" />
    <property name="wlib.dir" location="${basedir}/lib" />
    <property name="jsp.dir" location="${root.dir}/jsp" />
    <property name="prop.dir" location="${classes.dir}/gov/nih/nci/cadsr/sentinel" />
    <property name="src.dir" location="${basedir}/src/java" />
    <property name="lib.dir" location="${basedir}/lib" />
    <property name="dtd.dir" location="${basedir}/src/resources/dtd" />

    <path id="libpath">
        <fileset dir="${lib.dir}" includes="**/*.jar" />
		<fileset dir="${wlib.dir}" includes="**/*.jar" />
    </path>
	
	<taskdef resource="net/sf/antcontrib/antcontrib.properties" classpathref="libpath" />
	
	<if>
		<isset property="tiername" />
		<then>
			<!-- if tiername is defined, load tier specific properties for tier based installation -->
			<property file="${tiername}.properties" />
		</then>
		<else>
			<property file="local.build.properties" />
			<property name="tiername" value="dev" /> 
		</else>
	</if>
	<property file="project.properties" />
	
    <property name="appl.version" value="${appl.release}.${DSTAMP}${TSTAMP}"/>

	<upper string="${tiername}" to="TIER.UPPER" />
	<property name="TIER" value="-${tiername}" />
	
	<property name="CADSR.DS.TNS.FULLSID" value="${CADSR.DS.TNS.SID}.NCI.NIH.GOV" />
	<property name="CADSR.DS.URL" value="${CADSR.DS.TNS.HOST}:${CADSR.DS.TNS.PORT}:${CADSR.DS.TNS.SID}" />
	<property name="CADSR.DS.FULLURL" value="${CADSR.DS.TNS.HOST}:${CADSR.DS.TNS.PORT}:${CADSR.DS.TNS.FULLSID}" />
	
	<property name="TOOL.ROOT.DIR" value="${TOOL.BASE.DIR}/cadsrsentinel" />
	<property name="TOOL.LOG.DIR" value="${TOOL.BASE.DIR}/autorun_log" />
		
	<property name="JBOSS.CONF.DIR" value="${JBOSS.SERVER.DIR}/conf" />
	<property name="JBOSS.DEPLOY.DIR" value="${JBOSS.SERVER.DIR}/deploy" />
	<property name="JBOSS.LOG.DIR" value="${JBOSS.SERVER.DIR}/log" />  

	<property name="TEST.VALID.USER" value="valid" />
	<property name="TEST.VALID.PSWD" value="valid" />
	<property name="TEST.BAD.USER" value="invalid" />
	<property name="TEST.BAD.PSWD" value="invalid" />
	
    <property name="toolBin.dir" location="${TOOL.ROOT.DIR}/bin" />
    <property name="toolDtd.dir" location="${TOOL.ROOT.DIR}/htdocs/dtd" />

    <condition property="TIER.NAME" value="DEVELOPMENT" >
        <equals arg1="${TIER.UPPER}" arg2="DEV"/>
    </condition>	
    <condition property="TIER.NAME" value="QA" >
        <equals arg1="${TIER.UPPER}" arg2="QA"/>
    </condition>	
    <condition property="TIER.NAME" value="STAGE" >
        <equals arg1="${TIER.UPPER}" arg2="STAGE"/>
    </condition>	
        <condition property="TIER.NAME" value="SANDBOX" >
            <equals arg1="${TIER.UPPER}" arg2="SANDBOX"/>
        </condition>	
    <condition property="TIER.NAME" value="PRODUCTION" >
        <equals arg1="${TIER.UPPER}" arg2="PROD"/>
    </condition>	
	
    <echo>

    	appl.version = ${appl.version}
        CADSR.DS.URL = ${CADSR.DS.URL}
        CADSR.DS.USER = ${CADSR.DS.USER}
        CADSR.DS.PSWD = ${CADSR.DS.PSWD}
        JBOSS.SERVER.DIR = ${JBOSS.SERVER.DIR}
        JBOSS.CONF.DIR = ${JBOSS.CONF.DIR}
        JBOSS.DEPLOY.DIR = ${JBOSS.DEPLOY.DIR}
        JBOSS.LOG.DIR = ${JBOSS.LOG.DIR}
        JDEBUG = ${JDEBUG}
        TEST = ${TEST}
        TEST.VALID.USER = ${TEST.VALID.USER}
        TEST.VALID.PSWD = ${TEST.VALID.PSWD}
        TEST.BAD.USER = ${TEST.BAD.USER}
        TEST.BAD.PSWD = ${TEST.BAD.PSWD}
        TIER = ${TIER}
        TIER.UPPER = ${TIER.UPPER}
        TIER.NAME = ${TIER.NAME}
        TOOL.ROOT.DIR = ${TOOL.ROOT.DIR}
        TOOL.LOG.DIR = ${TOOL.LOG.DIR}
    </echo>
    <condition property="check.props">
        <and>
            <isset property="JDEBUG" />
            <isset property="CADSR.DS.URL" />
            <isset property="CADSR.DS.USER" />
            <isset property="CADSR.DS.PSWD" />
            <isset property="TIER" />
            <isset property="TIER.UPPER" />
            <isset property="TIER.NAME" />
            <isset property="TOOL.LOG.DIR" />
            <isset property="TOOL.ROOT.DIR" />  
            <isset property="TEST" />
            <isset property="TEST.VALID.USER" />
            <isset property="TEST.VALID.PSWD" />
            <isset property="TEST.BAD.USER" />
            <isset property="TEST.BAD.PSWD" />
        </and>
    </condition>

    <condition property="check.test">
        <equals arg1="${TEST}" arg2="true" trim="true" />
    </condition>
    
    <condition property="logCategory" value="DEBUG" else="INFO">
        <equals arg1="${TIER.UPPER}" arg2="DEV"/>
    </condition>

    <filter token="CADSR.DS.URL" value="${CADSR.DS.URL}" />
	<filter token="CADSR.DS.FULLURL" value="${CADSR.DS.FULLURL}" />
    <filter token="CADSR.DS.USER" value="${CADSR.DS.USER}" />
    <filter token="CADSR.DS.PSWD" value="${CADSR.DS.PSWD}" />
    <filter token="TEST.VALID.USER" value="${TEST.VALID.USER}" />
    <filter token="TEST.VALID.PSWD" value="${TEST.VALID.PSWD}" />
    <filter token="TEST.BAD.USER" value="${TEST.BAD.USER}" />
    <filter token="TEST.BAD.PSWD" value="${TEST.BAD.PSWD}" />
    <filter token="TIER" value="${TIER}" />
    <filter token="TIER.UPPER" value="${TIER.UPPER}" />
    <filter token="TIER.NAME" value="${TIER.NAME}" />
    <filter token="TOOL.LOG.DIR" value="${TOOL.LOG.DIR}" />
    <filter token="JBOSS.LOG.DIR" value="${JBOSS.LOG.DIR}" />
    <filter token="appl.version" value="${appl.version}" />
    <filter token="logCategory" value="${logCategory}" />

    <target name="clean" depends="-prop-check" description="Deletes all project build artifacts and temporary files.">
        <echo>Remove old artifacts ...</echo>
        <delete dir="${classes.dir}" />
        <delete dir="${artifacts.dir}" />
        <delete file="${web.dir}/web.xml" />
        <mkdir dir="${classes.dir}" />
       	<mkdir dir="${classes.dir}/jsp" />
        <mkdir dir="${artifacts.dir}" />
        <mkdir dir="${artifacts.dir}/bin" />
        <mkdir dir="${artifacts.dir}/dtd" />
        <mkdir dir="${artifacts.dir}/gforge" />
        <mkdir dir="${artifacts.dir}/jboss" />
        <mkdir dir="${artifacts.dir}/sql" />
        <mkdir dir="${tr.dir}" />
    </target>

    <target name="-compile" depends="clean,-prop-check" description="Compiles the project source.">
        <echo>Compiling project source, debug is ${JDEBUG} ...</echo>
        <javac srcdir="${src.dir}" destdir="${classes.dir}" tempdir="${temp.dir}" debug="${JDEBUG}">
            <compilerarg line="-deprecation" />
            <compilerarg line="-Xlint:unchecked" />
            <classpath refid="libpath" />
        </javac>
        <copy todir="${classes.dir}">
            <fileset dir="${basedir}/src/resources/sdkapi" includes="**/*" />
        </copy>
    </target>

    <condition property="unix.os">
        <os family="unix" />
    </condition>
	
    <target name="-assemble" depends="-compile,-prop-check" description="Assembles the deployment parts into the artifacts folders.">
        <echo>Assembling artifacts ...</echo>
        <delete>
            <fileset file="${prop.dir}/DSRAlert.properties" />
            <fileset file="${prop.dir}/test/DSRAlertTest.properties" />
            <fileset file="${web.dir}/web.xml" />
        </delete>
        <copy todir="${artifacts.dir}">
            <fileset file="build.xml" />
            <fileset file="${PROP.FILE}" />
        </copy>
    	<property name="connectionUrl" value="${CADSR.DS.URL}" />
    	<property name="systemAccountName" value="${CADSR.DS.USER}" />
    	<property name="systemAccountPassword" value="${CADSR.DS.PSWD}" />
    	
    	<filter token="connectionUrl" value="${connectionUrl}"/>
    			<echo>connectionUrl = ${connectionUrl}</echo>
    			<filter token="systemAccountName" value="${systemAccountName}"/>
    			<echo>systemAccountName = ${systemAccountName}</echo>
    			<filter token="systemAccountPassword" value="${systemAccountPassword}"/>
    			<echo>systemAccountPassword not echoed</echo>
    			<filter token="logLevel" value="DEBUG"/>
    			<echo>logLevel = ${logLevel}</echo>
    			<filter token="host" value="${host}"/>
    			<echo>host = ${host}</echo>
		<filter token="buildDateTime" value="${buildDateTime}" />
    	
        <copy tofile="${prop.dir}/DSRAlert.properties" filtering="true">
            <fileset file="${basedir}/src/resources/conf/template.DSRAlert.properties" />
        </copy>
        <copy tofile="${prop.dir}/test/DSRAlertTest.properties" filtering="true">
            <fileset file="${basedir}/src/resources/conf/template.DSRAlertTest.properties" />
        </copy>
        <copy tofile="${web.dir}/web.xml" filtering="true">
            <fileset file="${basedir}/src/resources/conf/template.web.xml" />
        </copy>
        <copy tofile="${artifacts.dir}/sql/load_options.sql" filtering="true">
            <fileset file="${basedir}/src/resources/conf/template.load_options.sql" />
        </copy>
        <copy tofile="${artifacts.dir}/jboss/cadsrsentinel_modules.cli" filtering="true">
            <fileset file="${basedir}/cadsrsentinel_modules.cli" />
        </copy>
        <copy tofile="${artifacts.dir}/jboss/cadsrsentinel_setup_deploy.cli" filtering="true">
            <fileset file="${basedir}/cadsrsentinel_setup_deploy.cli" />
        </copy>
        <copy todir="${artifacts.dir}/dtd" filtering="true">
            <fileset dir="${dtd.dir}" includes="**/*.*" />
        </copy>
        <copy todir="${artifacts.dir}/bin" filtering="true">
            <fileset file="${basedir}/src/resources/scripts/autorun.sh" />
            <fileset file="${basedir}/src/resources/scripts/autorun.cmd" />
            <fileset file="${basedir}/src/resources/scripts/metadatacleanupscript.sh" />        	
        </copy>
        <copy tofile="${artifacts.dir}/bin/cadsrsentinel.xml" filtering="true">
            <fileset file="${basedir}/src/resources/conf/template.cadsrsentinel.xml" />
        </copy>
        <copy tofile="${artifacts.dir}/bin/metadatacleanup.xml" filtering="true">
            <fileset file="${basedir}/src/resources/conf/template.metadatacleanup.xml" />
        </copy>    	
        <copy tofile="${artifacts.dir}/bin/CleanStrings.xml" filtering="true">
            <fileset file="${basedir}/src/resources/conf/template.CleanStrings.xml" />
        </copy>
    	<copy tofile="${artifacts.dir}/bin/CleanOCR.xml" filtering="true">
    	    <fileset file="${basedir}/src/resources/conf/template.CleanOCR.xml" />
    	</copy>
        <copy tofile="${artifacts.dir}/bin/SimpleSQL.xml" filtering="true">
            <fileset file="${basedir}/src/resources/conf/template.SimpleSQL.xml" />
        </copy>
        <copy tofile="${artifacts.dir}/bin/log4j.xml" filtering="true">
            <fileset file="${basedir}/src/resources/conf/template.log4j-autorun.xml" />
        </copy>
        <copy todir="${artifacts.dir}/bin">
            <fileset dir="${lib.dir}" >
            	<include name="**/*.jar" />
            </fileset>
            <fileset dir="${basedir}/src/resources/sdkapi" includes="**/*" />
        </copy>
		<copy todir="${artifacts.dir}/jboss">
			<fileset file="${lib.dir}/ojdbc6.jar" />
		</copy>
        <copy tofile="${classes.dir}/project.properties" filtering="true">
            <fileset file="project.properties" />
        </copy>    	
        <fixcrlf srcdir="${artifacts.dir}" eol="lf" includes="**/*.sh, **/*.xml, **/*.properties, **/*.dtd, **/*.html" />
    	<if>
    		<equals arg1="${unix.os}" arg2="true"/>
    		<then>
    			<chmod file="${artifacts.dir}/bin/autorun.sh" perm="ugo+rx" />
    			<chmod file="${artifacts.dir}/bin/metadatacleanupscript.sh" perm="ugo+rx" />
    		</then>
    	</if>    	
    </target>

    <target name="-cjsp" depends="-assemble,-prop-check" description="Compiles the project JSP files to verify syntax.">
        <echo>Compiling JSP files to verify syntax ...</echo>
        <jspc srcdir="${jsp.dir}" destdir="${classes.dir}" compiler="jasper41"   verbose="1" failonerror="no">
            <classpath refid="libpath" />
            <include name="**/*.jsp" />
        </jspc>
        <javac srcdir="${classes.dir}/jsp" destdir="${classes.dir}" encoding="Cp1252">
            <classpath refid="libpath" />
            <include name="**/*.java" />
        </javac>
        <delete dir="${classes.dir}/jsp" />
        <delete dir="${classes.dir}/org" />
    </target>

    <target name="-build-jar" depends="-assemble,-prop-check" description="Build the project JAR files.">
        <echo>Building distributable JAR files ...</echo>
        <delete file="${artifacts.dir}/bin/cadsrsentinel.jar" />
        <delete file="${artifacts.dir}/gforge/cadsrsentinelapi.jar" />
        <!--cvs command="status -v" output="${classes.dir}/cvsdeploy.txt" /-->
        <jar destfile="${artifacts.dir}/bin/cadsrsentinel.jar">
            <fileset dir="${classes.dir}">
                <include name="cvsdeploy.txt" />
                <include name="gov/nih/nci/cadsr/sentinel/*.properties" />
                <include name="gov/nih/nci/cadsr/sentinel/tool/*.class" />
                <include name="gov/nih/nci/cadsr/sentinel/test/*.class" />
                <include name="gov/nih/nci/cadsr/sentinel/database/*.class" />
                <include name="gov/nih/nci/cadsr/sentinel/audits/*.class" />
                <include name="gov/nih/nci/cadsr/sentinel/daily/*.class" />
                <include name="gov/nih/nci/cadsr/sentinel/tags/*.class" />
                <include name="gov/nih/nci/cadsr/sentinel/ui/*.class" />
                <include name="gov/nih/nci/cadsr/sentinel/util/*.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="Anthill"/>
                <attribute name="Main-Class" value="gov/nih/nci/cadsr/sentinel/tool/AutoProcessAlerts"/>
                <section name="gov/nih/nci/cadsr/sentinel/">
                    <attribute name="Specification-Title" value="caDSR Sentinel Tool" />
                    <attribute name="Specification-Version" value="${appl.release}" />
                    <attribute name="Specification-Vendor" value="NCI" />
                    <attribute name="Implementation-Title" value="caDSR Sentinel Tool" />
                    <attribute name="Implementation-Version" value="${appl.version}" />
                    <attribute name="Implementation-Vendor" value="NCI" />
                </section>
            </manifest>
        </jar>
        <jar destfile="${artifacts.dir}/gforge/cadsrsentinelapi.jar">
            <fileset dir="${classes.dir}">
                <include name="cvsdeploy.txt" />
                <include name="gov/nih/nci/cadsr/sentinel/*.properties" />
                <include name="gov/nih/nci/cadsr/sentinel/util/*.class" />
            </fileset>
            <manifest>
                <attribute name="Built-By" value="Anthill"/>
                <section name="gov/nih/nci/cadsr/sentinel/">
                    <attribute name="Specification-Title" value="caDSR Sentinel Tool API" />
                    <attribute name="Specification-Version" value="${appl.release}" />
                    <attribute name="Specification-Vendor" value="NCI" />
                    <attribute name="Implementation-Title" value="caDSR Sentinel Tool API" />
                    <attribute name="Implementation-Version" value="${appl.version}" />
                    <attribute name="Implementation-Vendor" value="NCI" />
                </section>
            </manifest>
        </jar>
        <delete file="${classes.dir}/cvsdeploy.txt" />
    </target>

    <target name="test" if="check.test" depends="-prop-check" description="Execute auto tests on the project logic.">
        <echo>Performing automated project tests ...</echo>
        <delete>
            <fileset dir="${tr.dir}" includes="**/*" />
        </delete>
        <junit printsummary="on" haltonfailure="yes" showoutput="yes" filtertrace="off">
            <classpath refid="libpath" />
            <classpath>
                <pathelement location="${root.dir}" />
                <pathelement location="${classes.dir}" />
            </classpath>
            <sysproperty key="test_propfile" value="${prop.dir}/test/DSRAlertTest.properties" />
            <sysproperty key="property_xml" value="${artifacts.dir}/bin/cadsrsentinel.xml" />
            <formatter type="plain" />
            <batchtest fork="yes" todir="${tr.dir}" filtertrace="off">
                <fileset dir="${src.dir}">
                    <include name="**/test/TestDatabase.java" />
                </fileset>
            </batchtest>
        </junit>
        <junit printsummary="on" haltonfailure="yes" showoutput="yes" filtertrace="off">
            <classpath refid="libpath" />
            <classpath>
                <pathelement location="${root.dir}" />
                <pathelement location="${classes.dir}" />
            </classpath>
            <sysproperty key="test_propfile" value="${prop.dir}/test/DSRAlertTest.properties" />
            <sysproperty key="property_xml" value="${artifacts.dir}/bin/cadsrsentinel.xml" />
            <formatter type="plain" />
            <batchtest fork="yes" todir="${tr.dir}" filtertrace="off">
                <fileset dir="${src.dir}">
                    <include name="**/test/Test*.java" />
                </fileset>
            </batchtest>
        </junit>
    </target>

    <target name="-build-war" depends="-cjsp,-prop-check" description="Builds the project WAR file.">
        <echo>Building deployable WAR file ...</echo>
        <delete file="${artifacts.dir}/cadsrsentinel.war" />
        <!--<cvs command="status -v" output="${jsp.dir}/cvsdeploy.txt" />-->
        <war destfile="${artifacts.dir}/cadsrsentinel.war" basedir="${root.dir}" update="true" webxml="${web.dir}/web.xml">
            <manifest>
                <attribute name="Built-By" value="Anthill"/>
                <section name="gov/nih/nci/cadsr/sentinel/">
                    <attribute name="Specification-Title" value="caDSR Sentinel Tool" />
                    <attribute name="Specification-Version" value="${appl.release}" />
                    <attribute name="Specification-Vendor" value="NCI" />
                    <attribute name="Implementation-Title" value="caDSR Sentinel Tool" />
                    <attribute name="Implementation-Version" value="${appl.version}" />
                    <attribute name="Implementation-Vendor" value="NCI" />
                </section>
            </manifest>
        </war>
        <!-- <delete file="${jsp.dir}/cvsdeploy.txt" /> -->
    	<!-- This is to delete UI only jars from Tools directory -->
        <delete>
            <fileset dir="${artifacts.dir}/bin" includes="**/struts*.jar"/>
        </delete>
    </target>

    <target name="build-product" depends="-build-war,-build-jar,test,-prop-check" description="Builds all project binaries.">
        <echo>Built products for ${TIER.NAME}</echo>
    </target>

    <target name="package-download" depends="clean,-prop-check" description="Packages the project for public distribution and access.">
        <echo>Building project Open Source Download package ...</echo>
        <delete dir="${odi.dir}" />
        <mkdir dir="${odi.dir}" />
        <copy todir="${odi.dir}">
            <fileset dir="${basedir}">
                <include name="build.xml" />
                <include name="template.build.properties" />
                <include name="Open_Source_Software_License_v2_20080107.html" />
                <include name="caBIG_Logo.jpg" />
            </fileset>
        </copy>
        <mkdir dir="${odi.dir}/conf" />
        <copy todir="${odi.dir}/conf">
            <fileset dir="${basedir}/src/resources/conf" />
        </copy>
        <mkdir dir="${odi.dir}/doc" />
        <copy todir="${odi.dir}/doc">
            <fileset dir="${doc.dir}" />
        </copy>
        <mkdir dir="${odi.dir}/dtd" />
        <copy todir="${odi.dir}/dtd">
            <fileset dir="${basedir}/src/resources/dtd" />
        </copy>
        <mkdir dir="${odi.dir}/help" />
        <copy todir="${odi.dir}/help">
            <fileset dir="${root.dir}/help" />
        </copy>
        <mkdir dir="${odi.dir}/lib" />
        <copy todir="${odi.dir}/lib">
            <fileset dir="${basedir}/lib" />
        </copy>
        <mkdir dir="${odi.dir}/scripts" />
        <copy todir="${odi.dir}/scripts">
            <fileset dir="${basedir}/src/resources/scripts" />
        </copy>
        <mkdir dir="${odi.dir}/sdkapi" />
        <copy todir="${odi.dir}/sdkapi">
            <fileset dir="${basedir}/src/resources/sdkapi" />
        </copy>
        <mkdir dir="${odi.dir}/src" />
        <copy todir="${odi.dir}/src">
            <fileset dir="${src.dir}" />
        </copy>
        <mkdir dir="${odi.dir}/WebRoot" />
        <copy todir="${odi.dir}/WebRoot">
            <fileset dir="${root.dir}">
                <exclude name="**/classes/**" />
                <exclude name="**/web.xml" />
            </fileset>
        </copy>

        <zip destfile="${artifacts.dir}/gforge/sentinel_ospack.zip">
            <zipfileset dir="${odi.dir}" />
        </zip>
        <tar destfile="${artifacts.dir}/gforge/sentinel_ospack.tar.gz" basedir="${odi.dir}" compression="gzip" />
    	
    	<delete dir="${temp.dir}"/>    	
        <delete dir="${odi.dir}" />
    </target>

    <target name="javadoc" depends="-prop-check" description="Build the project Javadoc.">
        <echo>Building project Javadoc ...</echo>
        <mkdir dir="${temp.dir}" />
        <delete dir="${doc.dir}" />
        <mkdir dir="${doc.dir}" />
        <mkdir dir="${artifacts.dir}" />
        <mkdir dir="${artifacts.dir}/gforge" />
        <javadoc destdir="${doc.dir}" Private="false" author="true" version="true" use="true" windowtitle="caDSR Sentinel Tool API">
            <classpath refid="libpath" />
            <packageset dir="${src.dir}" defaultexcludes="yes">
                <include name="gov/nih/nci/cadsr/sentinel/**" />
            </packageset>
            <doctitle>caDSR Sentinel Tool</doctitle>
            <bottom>Copyright &#169; 2005 NCI All Rights Reserved.</bottom>
            <tag name="todo" scope="all" description="To do:" />
            <group title="Source Package" packages="gov.nih.nci.cadsr.sentinel.tool;gov.nih.nci.cadsr.sentinel.test;gov.nih.nci.cadsr.sentinel.audits;gov.nih.nci.cadsr.sentinel.database;gov.nih.nci.cadsr.sentinel.ui;gov.nih.nci.cadsr.sentinel.util;gov.nih.nci.cadsr.sentinel.tags;gov.nih.nci.cadsr.sentinel.daily" />
            <link offline="true" href="http://java.sun.com/products/jdk/1.2/docs/api/" packagelistLoc="${temp.dir}" />
        </javadoc>
        <zip destfile="${artifacts.dir}/gforge/sentinel_doc.zip">
            <zipfileset dir="${doc.dir}" />
        </zip>
        <!--<delete dir="${doc.dir}" /> -->
    </target>

    <target name="build-all" depends="build-product" description="Deploy Cron Job file to running directory.">
        <echo>Automated deploy CronJob files deployment to file system...</echo>
        <copy todir="${toolDtd.dir}">
            <fileset dir="${artifacts.dir}/dtd" includes="**/*.*"/>
        </copy>
        <delete>
           <fileset dir="${toolBin.dir}">
           	  <include name="**/.jar,**/.xml"/>
           </fileset>
        </delete>
        <copy todir="${toolBin.dir}">
            <fileset dir="${artifacts.dir}/bin" includes="**/*.*">
            	<exclude name="**/struts*.jar"/>
            </fileset>
        </copy>
    	<if>
    		<equals arg1="${unix.os}" arg2="true"/>
    		<then>
    			<chmod file="${toolBin.dir}/autorun.sh" perm="ugo+rx" />
    		</then>
    	</if>
        
    </target>
	
    <target name="deploy-local" depends="build-product" description="Deploys the executable product binaries.">
        <echo>Automated deploy CronJob files deployment to file system...</echo>
    	<delete dir="${TOOL.ROOT.DIR}" />
    	<delete dir="${TOOL.LOG.DIR}" />
    	<mkdir dir="${TOOL.ROOT.DIR}" />
    	<mkdir dir="${TOOL.ROOT.DIR}/bin" />
    	<mkdir dir="${TOOL.ROOT.DIR}/reports" />
    	<mkdir dir="${TOOL.LOG.DIR}" />    	
        <copy todir="${toolDtd.dir}">
            <fileset dir="${artifacts.dir}/dtd" includes="**/*.*"/>
        </copy>
        <copy todir="${toolBin.dir}">
            <fileset dir="${artifacts.dir}/bin" includes="**/*.*">
            	<exclude name="**/struts*.jar"/>
            </fileset>
        </copy>
    	<echo>Deploying war files to web server ...</echo>
        <copy tofile="${JBOSS.DEPLOY.DIR}/cadsrsentinel.waz">
            <fileset file="${artifacts.dir}/cadsrsentinel.war" />
        </copy>
        <move file="${JBOSS.DEPLOY.DIR}/cadsrsentinel.waz" tofile="${JBOSS.DEPLOY.DIR}/cadsrsentinel.war" />
		<copy todir="${JBOSS.SERVER.DIR}/lib">
		   	<fileset file="${artifacts.dir}/jboss/ojdbc14.jar"/>
		</copy>
	
		<copy todir="${JBOSS.DEPLOY.DIR}">
			<fileset dir="${artifacts.dir}/jboss">
				<include name="**/*-ds.xml" />
			</fileset>
		</copy>
		<copy todir="${JBOSS.CONF.DIR}">
		   <fileset file="${artifacts.dir}/jboss/*-log4j*.xml"/>
		</copy>		   	
    </target>


    <target name="-build-all" depends="build-product,javadoc,package-download,-prop-check" description="Builds all project deliverables.">
        <echo>Built artifacts for ${TIER.NAME}</echo>
    </target>

    <target name="-prop-check" unless="check.props" description="Verifies the presence of all required properties.">
        <fail>Missing one or more properties, see template.build.properties for a complete list.</fail>
    </target>

    <target name="-init-check" if="check.props" description="Notify the user that all properties are present.">
        <echo>All properties are present.</echo>
    </target>

    <target name="init" description="The default target which only validates the presence of the script properties.">
        <echo>This script can be run with one or more of the following: build-all, build-product, clean, deploy, javadoc, package-download, test. Execute Ant with the "-p" option for a description of all targets.</echo>
    </target>
    

</project>
